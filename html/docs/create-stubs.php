<?php
if ( php_sapi_name() != 'cli' ) {
	die();
}

require __DIR__ . '/../../vendor/autoload.php';

$ext = new ReflectionExtension('xdebug');

$functionsClass = new XdebugDotOrg\Controller\Docs\FunctionsController;
$functions = $functionsClass->getRelatedFunctions( -1 );
ksort( $functions );

$extVersion = phpversion("Xdebug");

echo <<<ENDHEADER
<?php
/** @generate-function-entries */

/* This file is generated by the 'xdebug.org:html/docs/create-stubs.php' robot
 * for Xdebug {$extVersion} â€” do not modify by hand */


ENDHEADER;

$foundFunctions = [];

foreach( $functions as $info )
{
	if ( $info->name === 'var_dump' )
	{
		continue;
	}
	$foundFunctions[] = $info->name;
	$w = '/* ' . str_repeat( '-', 71 ) . '*/';

	echo "/* {$info->short_description} */\n";

	$entry =  "function {$info->name}";

	if ( isset( $info->arguments ) )
	{
		$entry .= "({$info->arguments})";
	}
	else
	{
		$entry .= '()';
	}

	if ( isset( $info->return_type ) )
	{
		if ( $info->return_type == 'mixed' )
		{
			$entry = "/** @return mixed */\n" . $entry;
		}
		else if ( $info->return_type == 'void' )
		{
			$entry = "/** @return void */\n" . $entry;
		}
		else if ( str_contains( (string) $info->return_type, '|' ) )
		{
			$entry = "/** @return {$info->return_type} */\n" . $entry;
		}
		else
		{
			$entry .= ": {$info->return_type}";
		}
	}

	$entry .= " {}\n\n{$w}\n\n";

	echo $entry;
}

/* Check for missing settings */
$extensionFunctions = array_keys( $ext->getFunctions() );
foreach ( $extensionFunctions as $functionName )
{
	$sanitizedFunctionName = preg_replace( '/^xdebug\./', '', $functionName );

	if ( !in_array( $sanitizedFunctionName, $foundFunctions ) )
	{
		fprintf( STDERR, "$functionName is missing\n" );
	}
}


